We thank the reviewers and apologize for not answering every question.
We did our best to triage and devote the limited space to what we
perceived as the questions the reviewers most wanted answered

---

B, D, E: What does COWL give up by being coarse-grained?

  We discuss coarse-grained vs. fine-grained IFC in the context of
  specific systems in the related work section.  Generally speaking,
  coarse-grained systems require developers to think about
  compartmentalization; hence they may require more programmer effort
  for some applications (e.g., using jQuery with trusted code and
  sensitive-data).  We also note coarse- and fine-grained mechanisms
  are not mutually exclusive: one could use JSFlow within a COWL
  compartment.

D: How general is the label system?

  As described in Section 3.1, we use DCLabels [28], which are as
  expressive as the DLM [20] but less expressive than, say, first
  order logic.  DCLabels reflect existing web policies closely,
  allowing COWL to reuse existing mechanisms to enforce IFC.

B: Is "no communication after tainting" what is required of applications?

  To communicate after reading sensitive data, an application may
  create multiple compartments beforehand.  (Of course, this is
  unnecessary if it has or receives appropriate privilege as described
  in Section 3.2.)

B, D, E: What about integrity?

  Each label contains an integrity component; the design of integrity
  is complete and implemented, but was given short shrift for reasons
  of brevity.

E: SOP "provides some degree of integrity" for DOM mutation, what about COWL?

  In COWL, a privilege is required to modify the DOM (which has an
  integrity label corresponding to the origin), and privileges are
  granted in the same manner as SOP (describe in Section 3.2)

E: Is your vision to co-exist or replace all existing security mechanisms?

  COWL is designed to coexist with previous mechanisms so as to
  support incremental deployment and offer MAC to pages that opt-in.

E: How do you address taint accumulation?

  Compartments: First, compartments in browsing contexts are
  relatively short-lived (due to navigation).  Second, good
  application design can avoid over-tainting, by placing operations
  which raise the label in separate compartments.

  Files: We explicitly disallow taint accumulation (as in HiStar [42]
  and Hails/LIO [11]) by treating labels of files as immutable.  While
  this disallows writing to a public file by a sensitive compartment,
  a recent CSF paper shows that such systems are as not any less
  expressive.

A: What kind of objects can be labeled?

  Blobs, which can include serialized objects.

A, B: How do you disallow the manual setting of the label XHR header?

  We modified the XHR constructor to treat this header as reserved,
  and ignore any user-provided label headers.

B: What is the covert channel story for COWL?

  When COWL restricts the SOP (no labeled XHR), code cannot leak more
  than it can under the SOP. (The case for 3/4 of our examples.)

  However, since labeled XHR allows code to access data not permitted
  by the SOP, covert channels are a concern here. As discussed in
  Section 3.3, clearance can be set to restrict the sensitivity of
  data a compartment can read (and thus leak).  This is an improvement
  over the status quo where users are asked to give up their password.

B: Does the sharing of heap space for LWorkers introduce new covert channels?

  Our implementation of LWorkers repurposes SpiderMonkey compartments,
  which are used for iframe isolation, hence, we believe the chance of
  leakage to be no greater.

A, C: What is the label check performed when accessing DOM of compartment?

  We briefly mentioned that an integrity check is involved in the
  label check for DOM modification.  Here are the details: suppose
  compartment A tries to modify the DOM of compartment B. With
  DClabels, this operation is allowed if compartment A's integrity
  label implies the integrity label on B's DOM.

  Ordinarily, this label check would fail, because the current
  integrity label of all compartments defaults to public (no integrity
  guarantees), but the integrity label of a DOM defaults to its
  origin.  However, if compartment A holds the privilege for B, the
  operation would be allowed, overriding the label check.

D: Underlines, colors, bubbles?

  An underlined origin indicates that a compartment holds the
  privilege for that origin. We colored different origins for
  contrast. Bubbles only connote the raising of labels.
